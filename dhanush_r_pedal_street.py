# -*- coding: utf-8 -*-
"""Dhanush_R_pedal_street.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yr18HIaHRmk5NhowgBvRNRODqGzl87hD
"""

pip install torch torchvision diffusers transformers pillow



from diffusers import StableDiffusionPipeline
import torch

# Load Stable Diffusion model
model_id = "runwayml/stable-diffusion-v1-5"
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
pipe.to("cuda" if torch.cuda.is_available() else "cpu")

# Define prompt
prompt = "A serene sunset over a futuristic city"

# Generate and save 3 images
for i in range(3):
    image = pipe(prompt).images[0]
    image.save(f"generated_image_{i+1}.png")

pip install opencv-python pillow torch torchvision

from PIL import Image
import torchvision.transforms as transforms
import torch

# Define preprocessing steps
transform = transforms.Compose([
    transforms.Resize((224, 224)),  # Resize to 224x224
    transforms.ToTensor(),          # Convert to tensor
    transforms.Normalize(mean=[0.5], std=[0.5])  # Normalize
])

# Load and process images
preprocessed_images = []
for i in range(3):
    img = Image.open(f"generated_image_{i+1}.png")
    img = transform(img)  # Apply transformations
    preprocessed_images.append(img)

# Save processed images for verification
for i, img_tensor in enumerate(preprocessed_images):
    img_pil = transforms.ToPILImage()(img_tensor)
    img_pil.save(f"preprocessed_image_{i+1}.png")

!apt update
!apt install -y julia

!julia --version

!julia -e 'using Pkg; Pkg.add("IJulia")'

!julia -e 'println("Hello, Julia in Colab!")'

!jupyter kernelspec list

!julia -e 'using Pkg; Pkg.add("IJulia"); Pkg.build("IJulia")'

!julia -e 'using Pkg; Pkg.add(["Flux", "Images", "ImageTransformations", "FileIO"])'

!julia -e 'using Flux; println("Julia is working!")'

!julia -e 'using Flux; println("Flux is installed and ready!")'

# Commented out IPython magic to ensure Python compatibility.
# %%writefile model.jl
# using Flux
# using Images, ImageTransformations, FileIO
# 
# using Flux
# using Images, ImageTransformations, FileIO
# 
# # Load and preprocess image
# function load_image(image_path)
#     img = load(image_path)                      # Load image
#     img = imresize(img, (224, 224))             # Resize image
#     img = Float32.(channelview(img))            # Convert to Float32 tensor
#     img = permutedims(img, (2, 3, 1))           # Change shape to (H, W, C)
#     return reshape(img, 224, 224, 3, 1)         # Add batch dimension (B=1)
# end
# 
# # Define a minimal Flux CNN model
# model = Chain(
#     Conv((3, 3), 3=>16, relu, pad=1),
#     MaxPool((2, 2)),
#     Conv((3, 3), 16=>32, relu, pad=1),
#     MaxPool((2, 2)),
#     Flux.flatten,                      # Fix for undefined "flatten"
#     Dense(32 * 56 * 56, 64, relu),
#     Dense(64, 10),                     # Remove softmax from Dense
#     softmax                            # Apply softmax separately
# )
# 
# # Load a preprocessed image
# image_path = "preprocessed_image_1.png"
# input_image = load_image(image_path)
# 
# # Forward pass
# output = model(input_image)
# 
# # Get predicted class
# predicted_class = argmax(output)  # Get index of highest probability
# println("Predicted Class: ", predicted_class)
# 
# 
# 
#

!julia model.jl

from google.colab import drive
drive.mount('/content/drive')  # Mount Google Drive

# Move the ZIP file to Google Drive for easy access
!mv /content/project.zip /content/drive/MyDrive/